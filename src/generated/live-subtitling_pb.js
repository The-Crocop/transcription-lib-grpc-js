// source: live-subtitling.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var language_pb = require('./language_pb.js');
goog.object.extend(proto, language_pb);
var request$headers_pb = require('./request-headers_pb.js');
goog.object.extend(proto, request$headers_pb);
goog.exportSymbol('proto.sftpprocessor.Duration', null, global);
goog.exportSymbol('proto.sftpprocessor.LiveTranscriptionReply', null, global);
goog.exportSymbol('proto.sftpprocessor.LiveTranscriptionRequest', null, global);
goog.exportSymbol('proto.sftpprocessor.Word', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sftpprocessor.LiveTranscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sftpprocessor.LiveTranscriptionRequest.repeatedFields_, null);
};
goog.inherits(proto.sftpprocessor.LiveTranscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sftpprocessor.LiveTranscriptionRequest.displayName = 'proto.sftpprocessor.LiveTranscriptionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sftpprocessor.LiveTranscriptionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sftpprocessor.LiveTranscriptionReply.repeatedFields_, null);
};
goog.inherits(proto.sftpprocessor.LiveTranscriptionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sftpprocessor.LiveTranscriptionReply.displayName = 'proto.sftpprocessor.LiveTranscriptionReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sftpprocessor.Word = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sftpprocessor.Word, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sftpprocessor.Word.displayName = 'proto.sftpprocessor.Word';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sftpprocessor.Duration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sftpprocessor.Duration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sftpprocessor.Duration.displayName = 'proto.sftpprocessor.Duration';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sftpprocessor.LiveTranscriptionRequest.repeatedFields_ = [4,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sftpprocessor.LiveTranscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sftpprocessor.LiveTranscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sftpprocessor.LiveTranscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalreference: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourceurl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    outputlanguagesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    headers: (f = msg.getHeaders()) && request$headers_pb.RequestHeaders.toObject(includeInstance, f),
    sourcelanguage: jspb.Message.getFieldWithDefault(msg, 6, 0),
    additionalsourcelanguagesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest}
 */
proto.sftpprocessor.LiveTranscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sftpprocessor.LiveTranscriptionRequest;
  return proto.sftpprocessor.LiveTranscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sftpprocessor.LiveTranscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest}
 */
proto.sftpprocessor.LiveTranscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalreference(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceurl(value);
      break;
    case 4:
      var values = /** @type {!Array<!proto.Language>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOutputlanguages(values[i]);
      }
      break;
    case 5:
      var value = new request$headers_pb.RequestHeaders;
      reader.readMessage(value,request$headers_pb.RequestHeaders.deserializeBinaryFromReader);
      msg.setHeaders(value);
      break;
    case 6:
      var value = /** @type {!proto.Language} */ (reader.readEnum());
      msg.setSourcelanguage(value);
      break;
    case 7:
      var values = /** @type {!Array<!proto.Language>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAdditionalsourcelanguages(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sftpprocessor.LiveTranscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sftpprocessor.LiveTranscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sftpprocessor.LiveTranscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourceurl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOutputlanguagesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getHeaders();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      request$headers_pb.RequestHeaders.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Language} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getAdditionalsourcelanguagesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      7,
      f
    );
  }
};


/**
 * optional string externalReference = 1;
 * @return {string}
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.getExternalreference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest} returns this
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.setExternalreference = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest} returns this
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.clearExternalreference = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.hasExternalreference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string sourceUrl = 2;
 * @return {string}
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.getSourceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest} returns this
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.setSourceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Language outputLanguages = 4;
 * @return {!Array<!proto.Language>}
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.getOutputlanguagesList = function() {
  return /** @type {!Array<!proto.Language>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.Language>} value
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest} returns this
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.setOutputlanguagesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.Language} value
 * @param {number=} opt_index
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest} returns this
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.addOutputlanguages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest} returns this
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.clearOutputlanguagesList = function() {
  return this.setOutputlanguagesList([]);
};


/**
 * optional RequestHeaders headers = 5;
 * @return {?proto.RequestHeaders}
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.getHeaders = function() {
  return /** @type{?proto.RequestHeaders} */ (
    jspb.Message.getWrapperField(this, request$headers_pb.RequestHeaders, 5));
};


/**
 * @param {?proto.RequestHeaders|undefined} value
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest} returns this
*/
proto.sftpprocessor.LiveTranscriptionRequest.prototype.setHeaders = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest} returns this
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.clearHeaders = function() {
  return this.setHeaders(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.hasHeaders = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Language sourceLanguage = 6;
 * @return {!proto.Language}
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.getSourcelanguage = function() {
  return /** @type {!proto.Language} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.Language} value
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest} returns this
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.setSourcelanguage = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest} returns this
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.clearSourcelanguage = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.hasSourcelanguage = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Language additionalSourceLanguages = 7;
 * @return {!Array<!proto.Language>}
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.getAdditionalsourcelanguagesList = function() {
  return /** @type {!Array<!proto.Language>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<!proto.Language>} value
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest} returns this
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.setAdditionalsourcelanguagesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!proto.Language} value
 * @param {number=} opt_index
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest} returns this
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.addAdditionalsourcelanguages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sftpprocessor.LiveTranscriptionRequest} returns this
 */
proto.sftpprocessor.LiveTranscriptionRequest.prototype.clearAdditionalsourcelanguagesList = function() {
  return this.setAdditionalsourcelanguagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sftpprocessor.LiveTranscriptionReply.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.sftpprocessor.LiveTranscriptionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sftpprocessor.LiveTranscriptionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sftpprocessor.LiveTranscriptionReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalreference: jspb.Message.getFieldWithDefault(msg, 1, ""),
    result: jspb.Message.getFieldWithDefault(msg, 2, ""),
    language: jspb.Message.getFieldWithDefault(msg, 4, 0),
    original: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isfinal: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    wordsList: jspb.Message.toObjectList(msg.getWordsList(),
    proto.sftpprocessor.Word.toObject, includeInstance),
    languagecode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    stability: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sftpprocessor.LiveTranscriptionReply}
 */
proto.sftpprocessor.LiveTranscriptionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sftpprocessor.LiveTranscriptionReply;
  return proto.sftpprocessor.LiveTranscriptionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sftpprocessor.LiveTranscriptionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sftpprocessor.LiveTranscriptionReply}
 */
proto.sftpprocessor.LiveTranscriptionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalreference(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 4:
      var value = /** @type {!proto.Language} */ (reader.readEnum());
      msg.setLanguage(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOriginal(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsfinal(value);
      break;
    case 7:
      var value = new proto.sftpprocessor.Word;
      reader.readMessage(value,proto.sftpprocessor.Word.deserializeBinaryFromReader);
      msg.addWords(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguagecode(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConfidence(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sftpprocessor.LiveTranscriptionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sftpprocessor.LiveTranscriptionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sftpprocessor.LiveTranscriptionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getOriginal();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsfinal();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.sftpprocessor.Word.serializeBinaryToWriter
    );
  }
  f = message.getLanguagecode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
};


/**
 * optional string externalReference = 1;
 * @return {string}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.getExternalreference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sftpprocessor.LiveTranscriptionReply} returns this
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.setExternalreference = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sftpprocessor.LiveTranscriptionReply} returns this
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.clearExternalreference = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.hasExternalreference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string result = 2;
 * @return {string}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sftpprocessor.LiveTranscriptionReply} returns this
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Language language = 4;
 * @return {!proto.Language}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.getLanguage = function() {
  return /** @type {!proto.Language} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.Language} value
 * @return {!proto.sftpprocessor.LiveTranscriptionReply} returns this
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.setLanguage = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool original = 5;
 * @return {boolean}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.getOriginal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sftpprocessor.LiveTranscriptionReply} returns this
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.setOriginal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool isFinal = 6;
 * @return {boolean}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.getIsfinal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sftpprocessor.LiveTranscriptionReply} returns this
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.setIsfinal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated Word words = 7;
 * @return {!Array<!proto.sftpprocessor.Word>}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.getWordsList = function() {
  return /** @type{!Array<!proto.sftpprocessor.Word>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sftpprocessor.Word, 7));
};


/**
 * @param {!Array<!proto.sftpprocessor.Word>} value
 * @return {!proto.sftpprocessor.LiveTranscriptionReply} returns this
*/
proto.sftpprocessor.LiveTranscriptionReply.prototype.setWordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.sftpprocessor.Word=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sftpprocessor.Word}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.addWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.sftpprocessor.Word, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sftpprocessor.LiveTranscriptionReply} returns this
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.clearWordsList = function() {
  return this.setWordsList([]);
};


/**
 * optional string languageCode = 8;
 * @return {string}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.getLanguagecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.sftpprocessor.LiveTranscriptionReply} returns this
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.setLanguagecode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional double confidence = 9;
 * @return {number}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sftpprocessor.LiveTranscriptionReply} returns this
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.setConfidence = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sftpprocessor.LiveTranscriptionReply} returns this
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.clearConfidence = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double stability = 10;
 * @return {number}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.getStability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sftpprocessor.LiveTranscriptionReply} returns this
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.setStability = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sftpprocessor.LiveTranscriptionReply} returns this
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.clearStability = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sftpprocessor.LiveTranscriptionReply.prototype.hasStability = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sftpprocessor.Word.prototype.toObject = function(opt_includeInstance) {
  return proto.sftpprocessor.Word.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sftpprocessor.Word} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sftpprocessor.Word.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttime: (f = msg.getStarttime()) && proto.sftpprocessor.Duration.toObject(includeInstance, f),
    endtime: (f = msg.getEndtime()) && proto.sftpprocessor.Duration.toObject(includeInstance, f),
    word: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sftpprocessor.Word}
 */
proto.sftpprocessor.Word.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sftpprocessor.Word;
  return proto.sftpprocessor.Word.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sftpprocessor.Word} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sftpprocessor.Word}
 */
proto.sftpprocessor.Word.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sftpprocessor.Duration;
      reader.readMessage(value,proto.sftpprocessor.Duration.deserializeBinaryFromReader);
      msg.setStarttime(value);
      break;
    case 2:
      var value = new proto.sftpprocessor.Duration;
      reader.readMessage(value,proto.sftpprocessor.Duration.deserializeBinaryFromReader);
      msg.setEndtime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sftpprocessor.Word.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sftpprocessor.Word.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sftpprocessor.Word} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sftpprocessor.Word.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sftpprocessor.Duration.serializeBinaryToWriter
    );
  }
  f = message.getEndtime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sftpprocessor.Duration.serializeBinaryToWriter
    );
  }
  f = message.getWord();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Duration startTime = 1;
 * @return {?proto.sftpprocessor.Duration}
 */
proto.sftpprocessor.Word.prototype.getStarttime = function() {
  return /** @type{?proto.sftpprocessor.Duration} */ (
    jspb.Message.getWrapperField(this, proto.sftpprocessor.Duration, 1));
};


/**
 * @param {?proto.sftpprocessor.Duration|undefined} value
 * @return {!proto.sftpprocessor.Word} returns this
*/
proto.sftpprocessor.Word.prototype.setStarttime = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sftpprocessor.Word} returns this
 */
proto.sftpprocessor.Word.prototype.clearStarttime = function() {
  return this.setStarttime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sftpprocessor.Word.prototype.hasStarttime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Duration endTime = 2;
 * @return {?proto.sftpprocessor.Duration}
 */
proto.sftpprocessor.Word.prototype.getEndtime = function() {
  return /** @type{?proto.sftpprocessor.Duration} */ (
    jspb.Message.getWrapperField(this, proto.sftpprocessor.Duration, 2));
};


/**
 * @param {?proto.sftpprocessor.Duration|undefined} value
 * @return {!proto.sftpprocessor.Word} returns this
*/
proto.sftpprocessor.Word.prototype.setEndtime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sftpprocessor.Word} returns this
 */
proto.sftpprocessor.Word.prototype.clearEndtime = function() {
  return this.setEndtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sftpprocessor.Word.prototype.hasEndtime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string word = 3;
 * @return {string}
 */
proto.sftpprocessor.Word.prototype.getWord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sftpprocessor.Word} returns this
 */
proto.sftpprocessor.Word.prototype.setWord = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sftpprocessor.Duration.prototype.toObject = function(opt_includeInstance) {
  return proto.sftpprocessor.Duration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sftpprocessor.Duration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sftpprocessor.Duration.toObject = function(includeInstance, msg) {
  var f, obj = {
    seconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nanos: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sftpprocessor.Duration}
 */
proto.sftpprocessor.Duration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sftpprocessor.Duration;
  return proto.sftpprocessor.Duration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sftpprocessor.Duration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sftpprocessor.Duration}
 */
proto.sftpprocessor.Duration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeconds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNanos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sftpprocessor.Duration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sftpprocessor.Duration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sftpprocessor.Duration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sftpprocessor.Duration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNanos();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 seconds = 1;
 * @return {number}
 */
proto.sftpprocessor.Duration.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sftpprocessor.Duration} returns this
 */
proto.sftpprocessor.Duration.prototype.setSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 nanos = 2;
 * @return {number}
 */
proto.sftpprocessor.Duration.prototype.getNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sftpprocessor.Duration} returns this
 */
proto.sftpprocessor.Duration.prototype.setNanos = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.sftpprocessor);
